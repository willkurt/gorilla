{"accuracy": 0.92, "correct_count": 368, "total_count": 400}
{"id": 36, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": "[vegan_restaurant.find_nearby(location=\"New York, NY\", operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 51, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': 'water'. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "function": {"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}}, "model_result_raw": "[entropy_change.calculate(substance=\"water\", mass=1, initial_temperature=0, final_temperature=100, pressure=1)]", "model_result_decoded": [{"entropy_change.calculate": {"substance": "water", "mass": 1, "initial_temperature": 0, "final_temperature": 100, "pressure": 1}}], "possible_answer": {"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}}
{"id": 60, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'to_unit': 'g/mole'. Expected one of ['grams/mole', 'g/mol']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.", "function": {"name": "calculate_molecular_weight", "description": "Calculate the molecular weight of a compound given the compound formula.", "parameters": {"type": "dict", "properties": {"compound": {"type": "string", "description": "The molecular formula of the compound."}, "to_unit": {"type": "string", "description": "The unit in which to return the result."}}, "required": ["compound", "to_unit"]}}}, "model_result_raw": "[calculate_molecular_weight(compound=\"C6H12O6\", to_unit=\"g/mole\")]", "model_result_decoded": [{"calculate_molecular_weight": {"compound": "C6H12O6", "to_unit": "g/mole"}}], "possible_answer": {"calculate_molecular_weight": {"compound": ["C6H12O6"], "to_unit": ["grams/mole", "g/mol"]}}}
{"id": 68, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'size' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Identify a small green bird in forest.", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "dict", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird. Default is 'small'"}}, "required": ["color", "habitat"]}}}, "model_result_raw": "[identify_bird(color=\"green\", habitat=\"forest\")]", "model_result_decoded": [{"identify_bird": {"color": "green", "habitat": "forest"}}], "possible_answer": {"identify_bird": {"color": ["green"], "habitat": ["forest"], "size": ["small"]}}}
{"id": 70, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}}, "model_result_raw": "[ecology.get_turtle_population(location=\"Mississippi river\", year=2020)]", "model_result_decoded": [{"ecology.get_turtle_population": {"location": "Mississippi river", "year": 2020}}], "possible_answer": {"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}}
{"id": 92, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operating days: Sunday'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"operating days: Sunday\")]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operating days: Sunday"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}}
{"id": 99, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": "[calculate_clock_angle(hours=18, minutes=30)]", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 113, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'round_to': 4. Expected one of ['', 2]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}}, "model_result_raw": "[calculate_probability(total_outcomes=52, favorable_outcomes=4, round_to=4)]", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 52, "favorable_outcomes": 4, "round_to": 4}}], "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 121, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'equal_variance' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": {"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}}, "model_result_raw": "[run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7])]", "model_result_decoded": [{"run_two_sample_ttest": {"group1": [3, 4, 5, 6, 4], "group2": [7, 8, 9, 8, 7]}}], "possible_answer": {"run_two_sample_ttest": {"group1": [[3, 4, 5, 6, 4]], "group2": [[7, 8, 9, 8, 7]], "equal_variance": [true]}}}
{"id": 123, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[10, 20, 30, 40])]", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 137, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}}, "model_result_raw": "[compound_interest(principal=10000, annual_rate=0.05, compounding_freq=\"monthly\", time_in_years=5)]", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": {"compound_interest": {"principal": [10000], "annual_rate": [5], "compounding_freq": ["monthly"], "time_in_years": [5]}}}
{"id": 152, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country=\"U.S\", year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 184, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity=\"Apple\", county=\"Santa Clara\", state=\"California\")]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 201, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_efficiency': 25.0. Expected one of ['', 20.0]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type=\"gas\", fuel_efficiency=25.0)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25.0}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "[calculate_emission_savings(energy_type=\"solar\", usage_duration=3, region=\"California\")]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location=\"Chicago\")]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 217, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'text': \"I love the food here! It's always fresh  \u0438\". Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[sentiment_analysis(text=\"I love the food here! It's always fresh  \u0438\", language=\"en\")]", "model_result_decoded": [{"sentiment_analysis": {"text": "I love the food here! It's always fresh  \u0438", "language": "en"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 218, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_source': '/home/user/data/myfMRI.nii'. Expected one of ['~/data/myfMRI.nii']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "function": {"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}}, "model_result_raw": "[fMRI.analyze(data_source=\"/home/user/data/myfMRI.nii\", sequence_type=\"multi-band\", smooth=6, voxel_size=2)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "/home/user/data/myfMRI.nii", "sequence_type": "multi-band", "smooth": 6, "voxel_size": 2}}], "possible_answer": {"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}}
{"id": 234, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": "[european_history.get_event_date(event_name=\"Treaty of Tordesillas\")]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}}
{"id": 235, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "[history_eu.fetch_events(century=19, region=\"Europe\", category=\"Wars\")]", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 245, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematia'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "[publication_year.find(author=\"Isaac Newton\", work_title=\"Philosophi\u00e6 Naturalis Principia Mathematia\", location=\"all\")]", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematia", "location": "all"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 264, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me the most recent art sculpture by James Plensa with detailed description.", "function": {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional. Default is the most recent year."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}}, "model_result_raw": "[get_sculpture_info(artist_name=\"James Plensa\")]", "model_result_decoded": [{"get_sculpture_info": {"artist_name": "James Plensa"}}], "possible_answer": {"get_sculpture_info": {"artist_name": ["James Plensa"], "year": [""], "detail": [true]}}}
{"id": 268, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location=\"New York City, NY\", art_form=\"modern sculpture\", month=\"upcoming\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "modern sculpture", "month": "upcoming"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 300, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C# major'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the musical scale associated with C sharp major?", "function": {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}}, "model_result_raw": "[musical_scale(key=\"C# major\", scale_type=\"major\")]", "model_result_decoded": [{"musical_scale": {"key": "C# major", "scale_type": "major"}}], "possible_answer": {"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}}
{"id": 309, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "[sports.match_schedule(team_name=\"Manchester United\", num_matches=5, league=\"Premier League\")]", "model_result_decoded": [{"sports.match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "Premier League"}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 335, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Optional parameter 'ace_value' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}}, "model_result_raw": "[blackjack.check_winner(player_cards=['A', '10'], dealer_cards=['10', '9'])]", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"]}}], "possible_answer": {"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}}
{"id": 338, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"KeyError\", result=None)]", "model_result_decoded": [{"error.message": {"error": "KeyError", "result": null}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 371, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['bottle of olive oil', '5 pound bag of rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=['bottle of olive oil', '5 pound bag of rice'], quantity=[3, 1])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["bottle of olive oil", "5 pound bag of rice"], "quantity": [3, 1]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc=\"San Jose\", product_list=['apples', 'rice', '12 pack bottled water'])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack bottled water"]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkins', 'dozen eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'dozen eggs'], quantities=[3, 2])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "dozen eggs"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 383, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name=\"Hilton\", location=\"Chicago\", room_type=\"Single\", start_date=\"10th December 2022\", nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton", "location": "Chicago", "room_type": "Single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 388, "model_name": "mistral7bV3-outlines", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name=\"Plaza Hotel\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-03\", rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}